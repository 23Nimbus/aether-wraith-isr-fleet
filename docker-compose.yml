version: '3.8'

###############################################################################
# Docker Compose orchestrates the Æther Wraith ISR fleet services for local
# development and integration testing.  The composition defines three
# services:
#   - mqtt: a lightweight message broker (Eclipse Mosquitto) used for
#           inter‑component messaging.
#   - node_sim: a container built from ``docker/node_sim.dockerfile`` that
#           replays sample telemetry and publishes messages to MQTT.
#   - ai: a placeholder AI service that could expose a REST API or consume
#           messages.  At present it simply invokes the anomaly classifier.
#
# To launch all services concurrently, run:
#
#     docker-compose up --build
#
# This file intentionally avoids storing any credentials.  If your
# environment requires authentication, supply secrets via environment
# variables or a separate ``.env`` file (see ``.env.example``).
###############################################################################

services:
  mqtt:
    image: eclipse-mosquitto:latest
    container_name: aether_mqtt
    ports:
      - "1883:1883"
    # If a custom configuration is needed it can be mounted here.  The
    # repository includes an init script in ``comms/mqtt_broker_init.sh``
    # but the official image exposes its own entrypoint.
    restart: unless-stopped

  node_sim:
    build:
      context: .
      dockerfile: docker/node_sim.dockerfile
    container_name: aether_node_sim
    depends_on:
      - mqtt
    environment:
      MQTT_HOST: mqtt
      MQTT_PORT: 1883
    volumes:
      - ./telemetry:/app/telemetry
    # The default CMD defined in the Dockerfile runs the telemetry parser.  A
    # long‑running node implementation would be substituted here.
    restart: on-failure

  ai:
    image: python:3.11-slim
    container_name: aether_ai
    depends_on:
      - mqtt
    volumes:
      - .:/app
    working_dir: /app/aether-wraith-isr-fleet
    command: ["python", "agents/aether_ai.py"]
    # In a real deployment the AI service would expose a network port and
    # subscribe to MQTT topics.  For now it simply executes and exits.
    restart: "no"